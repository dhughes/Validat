<?xml version="1.0" encoding="iso-8859-1"?>

<!--
    validat.xml
	
    Description:
        This is the configuration xml that is passed to the validat object upon instantiation and includes
        definitions for all of the validation rules and data sets that the validation engine will handle.  This
        configuration file may also be extended through the include tag, in which case the configuration included
        in this file will be loaded first, then the configuration information in each include file will be loaded
        (top to bottom priority) with any duplicate rules or data sets overriding a previous configuration.
-->

<validat>

	<!-- Additional configuration information can be included from other files and validation rules or data sets 
		that have name conflicts will overwrite the previous value -->
	<include template="extendedRules.xml" />

	<!-- validation rule definitions -->
	<validation-rules>
		
		<!-- Each validation rule is specified with a unique name and its associated validator object bean name.
			A validation rule may also contain additional detail arguments to be passed into the validate function 
			along with the data value to be validated. -->

		<validation-rule name="alpha" validator="validateAlpha" />
		<validation-rule name="alphaNumeric" validator="validateAlphaNumeric" />
		<validation-rule name="birthdate" validator="validateBirthDate" >
			<arg name="min" default="0" />
			<arg name="max" default="120" />
		</validation-rule>
		<validation-rule name="creditCard" validator="validateCreditCard" />
		<validation-rule name="duplicatePerson" validator="validateDuplicatePerson" />
		<validation-rule name="length" validator="validateLength">
			<arg name="min" default="0" />
			<arg name="max" default="100" />
		</validation-rule>
		<validation-rule name="ssn" validator="validateSSN" />
		
	</validation-rules>
	
	<!-- data set definitions -->
	<data-sets>
	
		<!-- A dataset groups a set of assertions and data elements together and specifies the transformer object 
			(which adhears to the transformer interface) name that is utilized to retreive data from the data 
			collection. Data values returned by a transformer may be simple data value or more complex data values,
			such as a structure, or object. -->

		<data-set name="user" transformer="transformStruct">

			<!-- A data element represents a specific data value that can be requested by name from the transformer
				object for this data set.  The data-element's name attribute will be passed to the transformer 
				object to retrieve the data value to be validated.  The required attribute for the data element 
				indiciates whether the data value is required (true / false) or optional.
				
				- If the required attribute is TRUE, then all assertions within the data element will be evaluated.
				- If the required attribute is FALSE, then the assertions within the data element will be evaluated
					only if the data value is not an empty string.  If the data value is an empty string, none of
					the assertions will be evaluated.
				- If the required attribute is OPTIONAL, then none of the assertions within the data element will
					be evaluated.
				
				If the required attribute is true, then an additional message attribute for the data element should
				be provided and will contain the error message to be returned if the data value is an empty string.
				
				A data element may contain one or more assertions or a single data set.
				
				An assertion corresponds to a specific, previously defined, validation rule.  When defined within a 
				data element, the assert element then contains a collection of optional argument and message elments.
				The argument elements, of which there may be none, will be passed to the validator associated with
				the validation rule along with the value of the parent data element.  The validator will then return
				true if the validation succeeds, or it will return a message name which should correspond to a 
				message element within the assert element.  The validation engine will store the corresponding
				message value in the error collection that is returned.
				
				An assert element may also have an optional continueOnFail attribute, which if not provided, defaults
				to false.  This attribute instructs the validation engine to continue, or not, processing additional
				assertions if the current assertion has failed.
				
				When defined within a data element, the data set element signifies that the data element value is
				a complex value (structure, object, etc.) and not a simple string value.  The validation engine will
				then recursively call the validate method again, passing this complex data value along with the
				specified data set name.  Upon validation, it will concatenate the resulting error collection with
				the error collection for the current validation process.
				-->

			<data-element name="prefix" required="false" >
				<assert rule="prefix" >
					<!-- the message name must correspond to the value returned upon validation failure from the
						validator object -->
					<message name="invalid" value="errors.validation.user.prefix.invalid" />
				</assert>
			</data-element>
			<data-element name="firstName" required="true" message="errors.validation.user.firstName.required" >
				<assert rule="length" >
					<!-- optionally, additional arguments can be provided to the validator function -->
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.user.firstName.invalidLength" />
				</assert>
			</data-element>
			<data-element name="middleName" required="false" >
				<assert rule="length" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.user.middleName.invalidLength" />
				</assert>
			</data-element>
			<data-element name="lastName" required="true" message="errors.validation.user.lastName.required" >
				<assert rule="length" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.user.middleName.invalidLength" />
				</assert>
			</data-element>
			<data-element name="suffix" required="false" >
				<assert rule="suffix" >
					<message name="invalid" value="errors.validation.user.suffix.invalid" />
				</assert>
			</data-element>
			<data-element name="birthDate" required="true" message="errors.validation.user.birthdDate.required" >
				<assert rule="birthdate" >
					<message name="invalid" value="errors.validation.user.birthdate.invalid" />
				</assert>
			</data-element>
			<data-element name="ssn" required="true" message="errors.validation.user.ssn.required" >
				<assert rule="ssn" >
					<message name="invalid" value="errors.validation.user.ssn.invalid" />
				</assert>
			</data-element>

		</data-set>
			
		<data-set name="person" transformer="transformPerson">
		
			<!-- In addition to data elements, a data set may also contain "global" assertions that apply to more
				than one data element.  Similar to data element assertions, global assertions still correspond to
				a specific, previously defined, validation rule.  In addition to containing any relevant argument
				and message elements, a global assert also contains one or more data-element elements.  The name
				attribute of the data-element corresponds to the argument name on the validator to which the specified
				data value will be passed. -->

			<assert rule="duplicatePerson" >
				<data-element name="firstName" value="firstName" />
				<data-element name="lastName" value="lastName" />
				<data-element name="emailAddress" value="emailAddress" />

				<message name="failByEmail" value="errors.validation.person.duplicate.email" />
				<message name="failByName" value="errors.validation.person.duplicate.name" />
			</assert>

			<data-element name="firstName" required="true" message="errors.validation.user.firstName.required" >
				<assert rule="length" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.user.firstName.invalidLength" />
				</assert>
			</data-element>

			<data-element name="middleName" required="false" >
				<assert rule="length" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.user.middleName.invalidLength" />
				</assert>
			</data-element>

			<data-element name="lastName" required="true" message="errors.validation.user.lastName.required" >
				<assert rule="length" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.user.middleName.invalidLength" />
				</assert>
			</data-element>

			<data-element name="billingAddress" required="true" message="errors.validation.person.billingAddress.required" >
				<data-set name="address" />
			</data-element>

			<data-element name="mailingAddress" required="true" message="errors.validation.person.mailingAddress.required" >
				<data-set name="address" />
			</data-element>

			<data-element name="emailAddress" required="true" message="errors.validation.person.emailAddress.required" >
				<assert rule="emailAddress" continueOnFail="true" >
					<message name="invalid" value="errors.validation.person.emailAddress.invalid" />
				</assert>
				<assert rule="length" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.person.emailAddress.invalidLength" />
				</assert>
			</data-element>
			
		</data-set>
		
		<data-set name="address" transformer="trasnformAddress" >
			
			<assert rule="state" >
				<data name="state" value="state" />
				<data name="country" value="country" />
				<message name="required" value="errors.validation.address.state.required" />
				<message name="invalid" value="errors.validation.address.state.invalid" />
			</assert>

			<data-element name="street1" required="true" message="errors.validation.address.street1.required" >
				<assert rule="length" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.address.street1.invalidLength" />
				</assert>
			</data-element>

			<data-element name="street2" required="false" >
				<assert rule="length" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.address.street2.invalidLength" />
				</assert>
			</data-element>

			<data-element name="city" required="true" message="errors.validation.address.city.required" >
				<assert rule="length" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
					<message name="invalid" value="errors.validation.address.city.invalidLength" />
				</assert>
			</data-element>

			<data-element name="postalCode" required="true" message="errors.validation.address.postalCode.required" >
				<assert rule="postalCode" >
					<message name="invalid" value="errors.validation.address.postalCode.invalid" />
				</assert>
			</data-element>

			<data-element name="country" required="true" message="errors.validation.address.country.required" >
				<assert rule="country" >
					<message name="invalid" value="errors.validation.address.country.invalid" />
				</assert>
			</data-element>
			
		</data-set> 

	</data-sets>
	
</validat>		
