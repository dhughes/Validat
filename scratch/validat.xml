<?xml version="1.0" encoding="UTF-8"?>

<!--
    validat.xml
	
    Description:
        This is the configuration xml that is passed to the validat object upon instantiation and includes
		definitions for all of the validation rules and data sets that the validation engine will handle.  This
		configuration file may also be extended through the include tag, in which case the configuration included
		in this file will be loaded first, then the configuration information in each include file will be loaded
		(top to bottom priority) with any duplicate rules or data sets overriding a previous configuration.
-->

<validat>

	<!-- Additional configuration information can be included from other files
		any validation rules or data sets that have name conflicts will overwrite the previous value -->
	<include template="extendedRules.xml" />

	<!-- validation rule definitions -->
	<validation-rules>
		
		<!-- Each validation rule is specified with a unique name and its associated validator object bean name.
			a validation rule may also contain additional detail arguments to be passed into the validate function 
			along with the data value to be validated. -->

		<validation-rule name="alpha" validator="validateAlpha" />
		<validation-rule name="alphaNumeric" validator="validateAlphaNumeric" />
		<validation-rule name="birthdate" validator="validateBirthDate" >
			<arg name="min" default="0" />
			<arg name="max" default="120" />
		</validation-rule>
		<validation-rule name="creditCard" validator="validateCreditCard" />
		<validation-rule name="duplicatePerson" validator="validateDuplicatePerson" />
		<validation-rule name="length" validator="validateLength">
			<arg name="min" default="0" />
			<arg name="max" default="100" />
		</validation-rule>
		<validation-rule name="required" validator="validateRequired" />
		<validation-rule name="ssn" validator="validateSSN" />
		
	</validation-rules>
	
	<!-- data set definitions -->
	<data-sets>
	
		<!-- A dataset groups a set of assertions and data elements together and specifies the transformer object name that is 
			utilized upon the received data collection to turn it into a key / value structure that the validate method can 
			utilize.  The transformer attribute is optional, and if omitted, the validation engine will assume the data collection 
			is a structure of key / value pairs and will thrown an error otherwise. -->

		<data-set name="userTest" transformer="transformStruct">
		
			<!-- A data element represents a key name in the structure returned by the transformer.  The data-element tag's name
				attribute should match this key name.  For client-side form validation, this name should correspond with the name 
				attribute on the form tag. The required attribute for the data element and an optional message attribute indiciate 
				if the element is optional.  If the data element is optional and the data element value is empty, any assertions 
				for that data element will not be processed.  The message attribute indicates the message to be returned if the 
				data element is required and no value is present, thus, it is not necessary when the required attribute is set to
				false.
				
				Data elements may depend upon other data elements by use of the optional depends and value attributes.  For example,
				if a data element is required, but has a dependency upon another data element, that secondary data element must have
				a value provided in order for the required validation check to be made.  Additionally, if a value is specified along
				with the dependency, the data element to which the dependency points must have a value equal to the value attribute
				in order for the required validation check to be made. ( Example: a data-element "state" is only required if the 
				value specified for the data-element "country" is equal to "U.S.". )
				
				Each data element may contain either one data-set sub-element or one or more assertions sub-elements.  
				
				A data-set sub-element indiciates that the data element is a complex data collection in itself and will cause the
				validation engine to recursively call itself, passing the nested data collection to be validated.  The data-set 
				sub-element specifies the name of another existing data-set defintion which will validate the nested data collection 
				and append any errors to the parent validation process's error collection.
				
				The assertion sub-element specifies the validation rule to test the data element value against, along with an error 
				message to be returned upon validation failure.  An assertion may specify an optional attribute continueOnFail 
				(defaults to false) which instructs the validator to continue validating other assertions for the data element even 
				though the current assertion has failed.
				
				Like data elements, assertions may also be dependent upon other data elements and their assertions, such as one data 
				element is only type checked if another data element has a value or has a certain value.  By adding a depends 
				attribute equal to the data element name upon which that assertion depends, a relationship like this can be built.
				In addtion, a value attribute can be added to the assertion along with the depends attribute if the dependency is 
				based upon a specific value for the specified data element.  A dependency relationship at the assertion level will
				not only depend upon the secondary data-element having a value specified, or a specific value specified, but also
				that that secondary data-element has passed all of its assertions.
				
				Lastly, an assertion may also contain additional detail arguments which will be passed into the validate function of the 
				validator along with the data value to be validated. -->

			<data-element name="prefix" required="false" >
				<assert rule="prefix" message="errors.validation.user.prefix.invalid" />
			</data-element>
			<data-element name="firstName" required="true" message="errors.validation.user.firstName.required" >
				<assert rule="length" message="errors.validation.user.firstName.invalidLength" continueOnFail="true" >
					<!-- optionally, additional arguments can be provided to the validator function -->
					<arg name="min" value="1" />
					<arg name="max" value="100" />
				</assert>
			</data-element>
			<data-element name="middleName" required="false" >
				<assert rule="length" message="errors.validation.user.middleName.invalidLength" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
				</assert>
			</data-element>
			<data-element name="lastName" required="true" message="errors.validation.user.lastName.required" >
				<assert rule="length" message="errors.validation.user.lastName.invalidLength" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
				</assert>
			</data-element>
			<data-element name="suffix" required="false" >
				<!-- <assert rule="suffix" message="errors.validation.user.suffix.invalid" /> -->
			</data-element>
			<data-element name="birthDate" required="true" message="errors.validation.user.birthdDate.required" >
				<!-- <assert rule="birthdate" message="errors.validation.user.birthDate.invalid" /> -->
			</data-element>
			<data-element name="ssn" required="true" message="errors.validation.user.ssn.required" >
				<!-- <assert rule="ssn" message="errors.validation.user.ssn.invalid" /> -->
			</data-element>

		</data-set>
		
		<!-- Data structures that are returned from a transformer can also represent more complex 
			data including nested structures that could then have multiple data sets and assicated 
			assertions applied. --->
			
		<data-set name="personObj" transformer="transformPersonObj">
			<assert rule="duplicatePerson" >
				<message name="failByEmail" value="errors.validation.personObj.duplicate.email" />
				<message name="failByName" value="errors.validation.personObj.duplicate.name" />
			</assert>
			<data-element name="firstName" required="true" message="errors.validation.personObj.firstName.required" >
				<assert rule="length" message="errors.validation.personObj.firstName.invalidLength" continueOnFail="true" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
				</assert>
			</data-element>
			<data-element name="middleName" required="false" >
				<assert rule="length" message="errors.validation.personObj.middleName.invalidLength" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
				</assert>
			</data-element>
			<data-element name="lastName" required="true" message="errors.validation.personObj.lastName.required" >
				<assert rule="length" message="errors.validation.personObj.lastName.invalidLength" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
				</assert>
			</data-element>
			<data-element name="billingAddress" required="true" message="errors.validation.personObj.billingAddress.required" >
				<data-set name="addressObj" />
			</data-element>
			<data-element name="mailingAddress" required="true" message="errors.validation.personObj.mailingAddress.required" >
				<data-set name="addressObj" />
			</data-element>
		</data-set>
		
		<data-set name="addressObj">
			<data-element name="street1" required="true" message="errors.validation.addressObj.street1.required" >
				<assert rule="length" message="errors.validation.addressObj.street1.invalidLength" continueOnFail="true" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
				</assert>
			</data-element>
			<data-element name="street2" required="false" >
				<assert rule="length" message="errors.validation.addressObj.street1.invalidLength" continueOnFail="true" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
				</assert>
			</data-element>
			<data-element name="city" required="true" message="errors.validation.addressObj.city.required" >
				<assert rule="length" message="errors.validation.addressObj.city.invalidLength" continueOnFail="true" >
					<arg name="min" value="1" />
					<arg name="max" value="100" />
				</assert>
			</data-element>
			<data-element name="state" required="true" message="errors.validation.addressObj.state.required" depends="country" value="US" >
				<assert rule="state" message="errors.validation.addressObj.state.invalid" />
			</data-element>
			<data-element name="postalCode" required="true" message="errors.validation.addressObj.postalCode.required" >
				<assert rule="postalCode" message="errors.validation.addressObj.postalCode.invalid" />
			</data-element>
			<data-element name="country" required="true" message="errors.validation.addressObj.country.required" >
				<assert rule="country" message="errors.validation.addressObj.country.invalid" />
			</data-element>
		</data-set> 

	</data-sets>
	
</validat>